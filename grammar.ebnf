# Entrypoint
program = { statement }


statement = globalStatement
          | localStatement

globalStatement = functionDeclaration
                | classDeclaration
                | localStatement

localStatement = ifStatement
               | whileStatement
               | forStatement
               | variableStatement
               | assignmentStatement
               | returnStatement
               | breakStatement
               | continueStatement
               | expressionStatement


anyBody = "{" { localStatement } "}"


functionDeclaration = "func" IDENTIFIER "(" paramsList ")" anyBody

paramsList = [ IDENTIFIER { "," IDENTIFIER } ]


classDeclaration = "class" IDENTIFIER "{" constructorDeclaration { methodDeclaration } "}"

constructorDeclaration = "constructor" "(" paramsList ")" anyBody

methodDeclaration = functionDeclaration


ifStatement = "if" "(" expression ")" anyBody [ "else" anyBody ]


whileStatement = "while" "(" expression ")" anyBody


forInit = variableStatement
        | assignmentStatement
        | expressionStatement

forIncrement = assignmentStatementNoSemicolon
             | expression

forStatement = "for" "(" forInit  expression ";" forIncrement ")" anyBody


variableStatement = "var" IDENTIFIER "=" expression ";"


assignmentStatement = assignmentStatementNoSemicolon ";"
assignmentStatementNoSemicolon = IDENTIFIER { "." IDENTIFIER } ASSIGNMENT_OP expression

ASSIGNMENT_OP = "=" | "+=" | "-=" | "*=" | "/=" | "\\=" | "%=" | "^=" | "&=" | "|=" | "++=" |


returnStatement = "return" [ expression ] ";"

breakStatement = "break" ";"

continueStatement = "continue" ";"

expressionStatement = expression ";"


expression = literalExpression
           | variableExpression
           | groupingExpression
           | unaryExpression
           | binaryExpression
           | functionCallExpression
           | objectAccessExpression

variableExpression = IDENTIFIER

groupingExpression = "(" expression ")"

literalExpression = NUMBER | STRING | BOOLEAN | NULL

unaryExpression = UN_OP expression

UN_OP = "-" | "!" | "@" | "#"

binaryExpression = expression BIN_OP expression

BIN_OP = "+" | "-" | "*" | "/" | "\\" | "%" | "^" | "&" | "|" | ">" | "<" | "<=" | ">=" | "==" | "!=" | "++"

functionCallExpression = expression "(" callParamsList ")"

callParamsList = [ expression { "," expression } ]

objectAccessExpression = expression "." IDENTIFIER


IDENTIFIER = ID_ALPHA { (ID_ALPHA | DIGIT_10 | ANY_UNICODE_EMOJI) }
ID_ALPHA = LETTER | "_"

NUMBER = NUMBER_2 | NUMBER_10 | NUMBER_16

NUMBER_2 = "0b" DIGIT_2 { DIGIT_2 }
NUMBER_10 = NUMBER_10_INT [ "." NUMBER_10_INT ]
NUMBER_10_INT = DIGIT_10 { DIGIT_10 }
NUMBER_16 = "0x" DIGIT_16 { DIGIT_16 }

DIGIT_2  = "0" | "1"
DIGIT_10 = DIGIT_2 | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
DIGIT_16 = DIGIT_10 | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

STRING = "\"" STRING_ELEM "\""

STRING_ELEM = ALLOWED_CHARACTER | INTERPOLATION | ESCAPE_SEQUENCE

ALLOWED_CHARACTER = ... # any unicode character except for: \ " { }

INTERPOLATION = "{" expression "}"

ESCAPE_SEQUENCE = "\\" ESCAPE_CONTENT
ESCAPE_CONTENT  = "r" | "n" | "\\" | "\"" | "{" | "}"
                | ( "u{" ( NUMBER_2 | NUMBER_10_INT | NUMBER_16 ) "}" )

BOOLEAN = "true" | "false"

NULL = null
